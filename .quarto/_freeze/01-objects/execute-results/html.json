{
  "hash": "c7e9bd4006ec9220dd00d81781bb5145",
  "result": {
    "markdown": "---\ntitle: \"Setup: Jupyter, Quarto, libraries\"\n---\n\n\n\n## Vectors, Matrices, and Arrays\n\n<!-- Vectors, Matrices, and Numpy arrays. Logical indexing. For loops. -->\n\n<!-- Lego pictures made with https://www.mecabricks.com/en/workshop -->\n\nThis section introduces some of the most important tools for working with data: vectors, matrices, loops, and if statements. It would be nice to gradually introduce each one of these topics separately, but they tend to go together, especially when you're talking about programming in the context of data processing.\n\n### Mathematical Logic\n\nBefore we start talking about data structures and control structures, though, we're going to take a minute to review some concepts from mathematical logic. This will be useful for both data structures and control structures, so stick with me for a few minutes.\n\n#### And, Or, and Not\n\nWe can combine logical statements using and, or, and not.\n\n-   (X AND Y) requires that both X and Y are true.\n-   (X OR Y) requires that one of X or Y is true.\n-   (NOT X) is true if X is false, and false if X is true. Sometimes called **negation**.\n\nIn R, we use `!` to symbolize NOT.\n\nOrder of operations dictates that NOT is applied before other operations. So `NOT X AND Y` is read as `(NOT X) AND (Y)`. You must use parentheses to change the way this is interpreted.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(TRUE, FALSE, TRUE, FALSE)\ny <- c(TRUE, TRUE, FALSE, FALSE)\n\nx & y # AND\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\nx | y # OR\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\n!x & y # NOT X AND Y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\nx & !y # X AND NOT Y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE  TRUE FALSE\n```\n:::\n:::\n\n\n#### De Morgan's Laws\n\n[De Morgan's Laws](https://en.wikipedia.org/wiki/De_Morgan%27s_laws) are a set of rules for how to combine logical statements. You can represent them in a number of ways:\n\n-   NOT(A or B) is equivalent to NOT(A) and NOT(B)\n-   NOT(A and B) is equivalent to NOT(A) or NOT(B)\n\n::: panel-tabset\nWe can also represent them with Venn Diagrams.\n\n##### Definitions\n\n![Venn Diagram of Set A and Set B](images/SetA%20and%20SetB.png) Suppose that we set the convention that ![Shaded regions are TRUE, unshaded regions are FALSE](images/TrueFalse.png).\n\n##### DeMorgan's First Law\n\n![A venn diagram illustration of De Morgan's laws showing that the region that is outside of the union of A OR B (aka NOT (A OR B)) is the same as the region that is outside of (NOT A) and (NOT B)](images/DeMorgan1.png)\n\n##### DeMorgan's Second Law\n\n![A venn diagram illustration of De Morgan's laws showing that the region that is outside of the union of A AND B (aka NOT (A AND B)) is the same as the region that is outside of (NOT A) OR (NOT B)](images/DeMorgan2.png)\n:::\n\n### Basic Data Types {#basic-data-types}\n\nWhile we will discuss data types more in depth during class, it is important to have a base grasp on the types of data you might see in a programming language.\n\n#### Values and Types\n\nLet's start this section with some basic vocabulary.\n\n-   a **value** is a basic unit of stuff that a program works with, like `1`, `2`, `\"Hello, World\"`, and so on.\n-   values have **types** - `2` is an integer, `\"Hello, World\"` is a string (it contains a \"string\" of letters). Strings are in quotation marks to let us know that they are not variable names.\n\nIn `R`, there are some very basic data types:\n\n-   **logical** or **boolean** - FALSE/TRUE or 0/1 values. Sometimes, boolean is shortened to **bool**\n\n-   **integer** - whole numbers (positive or negative)\n\n-   **double** or **float** or **numeric**- decimal numbers.\n\n    -   **float** is short for floating-point value.\n    -   **double** is a floating-point value with more precision (\"double precision\").[^00-prereading-1]\n    -   `R` uses the name **numeric** to indicate a decimal value, regardless of precision.\n\n-   **character** or **string** - holds text, usually enclosed in quotes.\n\n[^00-prereading-1]: This means that doubles take up more memory but can store more decimal places. You don't need to worry about this much in R.\n\nIf you don't know what type a value is, `R` has a function to help you with that.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(FALSE)\nclass(2L) # by default, R treats all numbers as numeric/decimal values. \n          # The L indicates that we're talking about an integer. \nclass(2)\nclass(\"Hello, programmer!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"logical\"\n[1] \"integer\"\n[1] \"numeric\"\n[1] \"character\"\n```\n:::\n:::\n\n\n::: note\nIn R, boolean values are `TRUE` and `FALSE`. Capitalization matters a LOT.\n\nOther things matter too: if we try to write a million, we would write it `1000000` instead of `1,000,000`. Commas are used for separating numbers, not for proper spacing and punctuation of numbers. This is a hard thing to get used to but very important -- especially when we start reading in data.\n:::\n\n#### Variables\n\nProgramming languages use **variables** - names that refer to values. Think of a variable as a container that holds something - instead of referring to the value, you can refer to the container and you will get whatever is stored inside.\n\nIn R, we **assign** variables values using the syntax `object_name <- value` You can read this as \"object name gets value\" in your head.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmessage <- \"So long and thanks for all the fish\"\nyear <- 2025\nthe_answer <- 42L\nearth_demolished <- FALSE\n```\n:::\n\n\n::: note\nNote that in `R`, we assign variables values using the `<-` operator. Technically, `=` will work for assignment, but `<-` is more common than `=` in `R` by convention.\n:::\n\nWe can then use the variables - do numerical computations, evaluate whether a proposition is true or false, and even manipulate the content of strings, all by referencing the variable by name.\n\n#### Valid Names\n\n> There are only two hard things in Computer Science: cache invalidation and naming things.\\\n> -- Phil Karlton\n\nObject names must start with a letter and can only contain letters, numbers, `_`, and `.` in R.\n\nWhat happens if we try to create a variable name that isn't valid?\n\nStarting a variable name with a number will get you an error message that lets you know that something isn't right - \"unexpected symbol\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1st_thing <- \"check your variable names!\"\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: <text>:1:2: unexpected symbol\n1: 1st_thing\n     ^\n```\n:::\n:::\n\n\nNaming things is difficult! When you name variables, try to make the names descriptive - what does the variable hold? What are you going to do with it? The more (concise) information you can pack into your variable names, the more readable your code will be.\n\n::: learn-more\n[Why is naming things hard?](https://neilkakkar.com/why-is-naming-things-hard.html) - Blog post by Neil Kakkar\n:::\n\nThere are a few different conventions for naming things that may be useful:\n\n-   `some_people_use_snake_case`, where words are separated by underscores\n-   `somePeopleUseCamelCase`, where words are appended but anything after the first word is capitalized (leading to words with humps like a camel).\n-   `some.people.use.periods`\n-   A few people mix conventions with `variables_thatLookLike.this` and they are almost universally hated.\n\nAs long as you pick ONE naming convention and don't mix-and-match, you'll be fine. It will be easier to remember what you named your variables (or at least guess) and you'll have fewer moments where you have to go scrolling through your script file looking for a variable you named.\n\n#### Type Conversions\n\nWe talked about values and types above, but skipped over a few details because we didn't know enough about variables. It's now time to come back to those details.\n\nWhat happens when we have an integer and a numeric type and we add them together? Hopefully, you don't have to think too hard about what the result of `2 + 3.5` is, but this is a bit more complicated for a computer for two reasons: storage, and arithmetic.\n\nIn days of yore, programmers had to deal with memory allocation - when declaring a variable, the programmer had to explicitly define what type the variable was. This tended to look something like the code chunk below:\n\n    int a = 1\n    double b = 3.14159\n\nTypically, an integer would take up 32 bits of memory, and a double would take up 64 bits, so doubles used 2x the memory that integers did. R is **dynamically typed**, which means you don't have to deal with any of the trouble of declaring what your variables will hold - the computer automatically figures out how much memory to use when you run the code. So we can avoid the discussion of memory allocation and types because we're using higher-level languages that handle that stuff for us[^00-prereading-2].\n\n[^00-prereading-2]: In some ways, this is like the difference between an automatic and a manual transmission - you have fewer things to worry about, but you also don't know what's going on under the hood nearly as well\n\nBut the discussion of types isn't something we can completely avoid, because we still have to figure out what to do when we do operations on things of two different types - even if memory isn't a concern, we still have to figure out the arithmetic question.\n\nSo let's see what happens with a couple of examples, just to get a feel for **type conversion** (aka **type casting** or **type coercion**), which is the process of changing an expression from one data type to another.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmode(2L + 3.14159) # add integer 2 and pi\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nmode(2L + TRUE) # add integer 2 and TRUE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\nmode(TRUE + FALSE) # add TRUE and FALSE\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n:::\n\n\nAll of the examples above are 'numeric' - basically, a catch-all class for things that are in some way, shape, or form numbers. Integers and decimal numbers are both numeric, but so are logicals (because they can be represented as 0 or 1).\n\nYou may be asking yourself at this point why this matters, and that's a decent question. We will eventually be reading in data from spreadsheets and other similar tabular data, and types become *very* important at that point, because we'll have to know how `R` handles type conversions.\n\n::: tryitout\n##### Test it out! {.unnumbered}\n\nDo a bit of experimentation - what happens when you try to add a string and a number? Which types are automatically converted to other types? Fill in the following table in your notes:\n\nAdding a \\_\\_\\_ and a \\_\\_\\_ produces a \\_\\_\\_:\n\n| Logical | Integer | Decimal | String |     |\n|---------|---------|---------|--------|-----|\n| Logical |         |         |        |     |\n| Integer |         |         |        |     |\n| Decimal |         |         |        |     |\n| String  |         |         |        |     |\n:::\n\nAbove, we looked at automatic type conversions, but in many cases, we also may want to convert variables manually, specifying exactly what type we'd like them to be. A common application for this in data analysis is when there are \"\\*\" or \".\" or other indicators in an otherwise numeric column of a spreadsheet that indicate missing data: when this data is read in, the whole column is usually read in as character data. So we need to know how to tell `R` that we want our string to be treated as a number, or vice-versa.\n\nIn R, we can explicitly convert a variable's type using `as.XXX()` functions, where XXX is the type you want to convert to (`as.numeric`, `as.integer`, `as.logical`, `as.character`, etc.).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 3\ny <- \"3.14159\"\n\nx + y\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in x + y: non-numeric argument to binary operator\n```\n:::\n\n```{.r .cell-code}\nx + as.numeric(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.14159\n```\n:::\n:::\n\n\n#### Operators and Functions\n\nIn addition to variables, **functions** are extremely important in programming.\n\nLet's first start with a special class of functions called operators. You're probably familiar with operators as in arithmetic expressions: +, -, /, \\*, and so on.\n\nHere are a few of the most important ones:\n\n| Operation        | R symbol |\n|------------------|----------|\n| Addition         | `+`      |\n| Subtraction      | `-`      |\n| Multiplication   | `*`      |\n| Division         | `/`      |\n| Integer Division | `%/%`    |\n| Modular Division | `%%`     |\n| Exponentiation   | `^`      |\n\nNote that integer division is the whole number answer to A/B, and modular division is the fractional remainder when A/B.\n\nSo `14 %/% 3` would be 4, and `14 %% 3` would be 2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n14 %/% 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n14 %% 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\nNote that these operands are all intended for scalar operations (operations on a single number) - vectorized versions, such as matrix multiplication, are somewhat more complicated.\n\n#### Order of Operations\n\n`R` operates under the same mathematical rules of precedence that you learned in school. You may have learned the acronym PEMDAS, which stands for Parentheses, Exponents, Multiplication/Division, and Addition/Subtraction. That is, when examining a set of mathematical operations, we evaluate parentheses first, then exponents, and then we do multiplication/division, and finally, we add and subtract.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(1+1)^(5-2) # 2 ^ 3 = 8\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\n1 + 2^3 * 4 # 1 + (8 * 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 33\n```\n:::\n\n```{.r .cell-code}\n3*1^3 # 3 * 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\n#### String Operations\n\nYou will have to use functions to perform operations on strings, as `R` does not have string operators. In `R`, to concatenate things, we need to use functions: `paste` or `paste0`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaste(\"first\", \"second\", sep = \" \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"first second\"\n```\n:::\n\n```{.r .cell-code}\npaste(\"first\", \"second\", collapse = \" \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"first second\"\n```\n:::\n\n```{.r .cell-code}\npaste(c(\"first\", \"second\"), sep = \" \") # sep only works on separate parameters\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"first\"  \"second\"\n```\n:::\n\n```{.r .cell-code}\npaste(c(\"first\", \"second\"), collapse = \" \") # collapse works on vectors\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"first second\"\n```\n:::\n\n```{.r .cell-code}\npaste(c(\"a\", \"b\", \"c\", \"d\"), \n      c(\"first\", \"second\", \"third\", \"fourth\"), \n      sep = \"-\", collapse = \" \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a-first b-second c-third d-fourth\"\n```\n:::\n\n```{.r .cell-code}\n# sep is used to collapse parameters, then collapse is used to collapse vectors\n\npaste0(c(\"a\", \"b\", \"c\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\" \"b\" \"c\"\n```\n:::\n\n```{.r .cell-code}\npaste0(\"a\", \"b\", \"c\") # equivalent to paste(..., sep = \"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"abc\"\n```\n:::\n:::\n\n\nYou don't need to understand the details of this at this point in the class, but it is useful to know how to combine strings.\n\n#### Functions\n\n**Functions** are sets of instructions that take **arguments** and **return** values. Strictly speaking, operators (like those above) are a special type of functions -- but we aren't going to get into that now.\n\nWe're also not going to talk about how to create our own functions just yet. Instead, I'm going to show you how to *use* functions.\n\nIt may be helpful at this point to print out the [R reference card](files/Short-refcard.pdf)[^00-prereading-3]. This cheat sheet contains useful functions for a variety of tasks.\n\n[^00-prereading-3]: From https://cran.r-project.org/doc/contrib/Short-refcard.pdf\n\n**Methods** are a special type of function that operate on a specific variable type. In R, you would get the length of a string variable using `length(my_string)`.\n\nRight now, it is not really necessary to know too much more about functions than this: you can invoke a function by passing in arguments, and the function will do a task and return the value.\n\n### Data Structures {#data-structures}\n\nIn the previous section, we discussed 4 different data types: strings/characters, numeric/double/floats, integers, and logical/booleans. As you might imagine, things are about to get more complicated.\n\nData **structures** are more complicated arrangements of information.\n\n| Homogeneous | Heterogeneous |            |\n|-------------|---------------|------------|\n| 1D          | vector        | list       |\n| 2D          | matrix        | data frame |\n| N-D         | array         |            |\n\n#### Lists\n\nA **list** is a one-dimensional column of heterogeneous data - the things stored in a list can be of different types.\n\n![A lego list: the bricks are all different types and colors, but they are still part of the same data structure.](images/lego-list.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- list(\"a\", 3, FALSE)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"a\"\n\n[[2]]\n[1] 3\n\n[[3]]\n[1] FALSE\n```\n:::\n:::\n\n\nThe most important thing to know about lists, for the moment, is how to pull things out of the list. We call that process **indexing**.\n\n##### Indexing\n\nEvery element in a list has an **index** (a location, indicated by an integer position)[^00-prereading-4].\n\n[^00-prereading-4]: Throughout this section (and other sections), lego pictures are rendered using https://www.mecabricks.com/en/workshop. It's a pretty nice tool for building stuff online!\n\nIn `R`, we count from 1.\n\n![An R-indexed lego list, counting from 1 to 5](images/list-indexing-r.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- list(\"a\", 3, FALSE)\n\nx[1] # This returns a list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"a\"\n```\n:::\n\n```{.r .cell-code}\nx[1:2] # This returns multiple elements in the list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n[1] \"a\"\n\n[[2]]\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nx[[1]] # This returns the item\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"a\"\n```\n:::\n\n```{.r .cell-code}\nx[[1:2]] # This doesn't work - you can only use [[]] with a single index\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in x[[1:2]]: subscript out of bounds\n```\n:::\n:::\n\n\nList indexing with `[]` will return a list with the specified elements.\n\nTo actually retrieve the item in the list, use `[[]]`. The only downside to `[[]]` is that you can only access one thing at a time.\n\nWe'll talk more about indexing as it relates to vectors, but indexing is a general concept that applies to just about any multi-value object.\n\n#### Vectors\n\nA **vector** is a one-dimensional column of homogeneous data. Homogeneous means that every element in a vector has the same data type.\n\nWe can have vectors of any data type and length we want: ![vectors of different data types](images/lego-set-of-vectors.png)\n\n<!-- ![vector of purple 1x3 legos](images/lego-1x3-vector.png) -->\n\n##### Indexing by Location\n\nEach element in a vector has an **index** - an integer telling you what the item's position within the vector is. I'm going to demonstrate indices with the string vector\n\n| R                                                                         |     |\n|---------------------------------------------------------------------------|-----|\n| 1-indexed language                                                        |     |\n| Count elements as 1, 2, 3, 4, ..., N                                      |     |\n| ![R lego vector, labeled with numbers 1-12](images/lego-1x3-vector-R.png) |     |\n\nIn R, we create vectors with the `c()` function, which stands for \"concatenate\" - basically, we stick a bunch of objects into a row.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndigits_pi <- c(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5)\n\n# Access individual entries\ndigits_pi[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\ndigits_pi[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\ndigits_pi[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n# R is 1-indexed - a list of 11 things goes from 1 to 11\ndigits_pi[0]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nnumeric(0)\n```\n:::\n\n```{.r .cell-code}\ndigits_pi[11]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n# Print out the vector\ndigits_pi\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 3 1 4 1 5 9 2 6 5 3 5\n```\n:::\n:::\n\n\nWe can pull out items in a vector by indexing, but we can also replace specific things as well:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfavorite_cats <- c(\"Grumpy\", \"Garfield\", \"Jorts\", \"Jean\")\n\nfavorite_cats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Grumpy\"   \"Garfield\" \"Jorts\"    \"Jean\"    \n```\n:::\n\n```{.r .cell-code}\nfavorite_cats[2] <- \"Nyan Cat\"\n\nfavorite_cats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Grumpy\"   \"Nyan Cat\" \"Jorts\"    \"Jean\"    \n```\n:::\n:::\n\n\nIf you're curious about any of these cats, see the footnotes[^00-prereading-5].\n\n[^00-prereading-5]: [Grumpy cat](https://www.grumpycats.com/), [Garfield](https://www.garfield.com/), [Nyan cat](https://en.wikipedia.org/wiki/Nyan_Cat). Jorts and Jean: [The initial post](https://www.reddit.com/r/AmItheAsshole/comments/rfwgmc/aita_for_perpetuating_ethnic_stereotypes_about/) and the [update](https://www.reddit.com/user/throwawayorangecat/comments/rgi000/update_aita_for_perpetuating_stereotypes_about/) (both are worth a read because the story is hilarious). The cats also have a [Twitter account](https://twitter.com/JortsTheCat) where they promote workers rights.\n\n##### Indexing with Logical Vectors\n\nAs you might imagine, we can create vectors of all sorts of different data types. One particularly useful trick is to create a **logical vector** that goes along with a vector of another type to use as a **logical index**.\n\n![lego vectors - a pink/purple hued set of 1x3 bricks representing the data and a corresponding set of 1x1 grey and black bricks representing the logical index vector of the same length](images/lego-logical-full.png)\n\nIf we let the black lego represent \"True\" and the grey lego represent \"False\", we can use the logical vector to pull out all values in the main vector.\n\n| Black = True, Grey = False                                                                                                                                                                                                                                                                             | Grey = True, Black = False                                                                                                                                                                                                                                                                            |\n|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ![a pink/purple hued set of 1x3 bricks representing a vector and a corresponding set of 1x1 black bricks representing the logical index vector of the same length. The grey bricks (and corresponding values of the previous vector) have been removed (filtered out).](images/lego-logical-black.png) | ![a pink/purple hued set of 1x3 bricks representing a vector and a corresponding set of 1x1 grey bricks representing the logical index vector of the same length. The black bricks (and corresponding values of the previous vector) have been removed (filtered out).](images/lego-logical-grey.png) |\n\nNote that for logical indexing to work properly, the logical index must be the same length as the vector we're indexing. This constraint will return when we talk about data frames, but for now just keep in mind that logical indexing doesn't make sense when this constraint isn't true.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a character vector\nweekdays <- c(\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\")\nweekend <- c(\"Sunday\", \"Saturday\")\n\n# Create logical vectors\nrelax_days <- c(1, 0, 0, 0, 0, 0, 1) # doing this the manual way\nrelax_days <- weekdays %in% weekend # This creates a logical vector \n                                    # with less manual construction\nrelax_days\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE FALSE FALSE FALSE FALSE FALSE  TRUE\n```\n:::\n\n```{.r .cell-code}\nschool_days <- !relax_days # FALSE if weekend, TRUE if not\nschool_days\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE FALSE\n```\n:::\n\n```{.r .cell-code}\n# Using logical vectors to index the character vector\nweekdays[school_days] # print out all school days\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Monday\"    \"Tuesday\"   \"Wednesday\" \"Thursday\"  \"Friday\"   \n```\n:::\n:::\n\n\n#### Reviewing Types\n\nAs vectors are a collection of things of a single type, what happens if we try to make a vector with differently-typed things?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(2L, FALSE, 3.1415, \"animal\") # all converted to strings\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2\"      \"FALSE\"  \"3.1415\" \"animal\"\n```\n:::\n\n```{.r .cell-code}\nc(2L, FALSE, 3.1415) # converted to numerics\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2.0000 0.0000 3.1415\n```\n:::\n\n```{.r .cell-code}\nc(2L, FALSE) # converted to integers\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 0\n```\n:::\n:::\n\n\nAs a reminder, this is an example of **implicit** type conversion - R decides what type to use for you, going with the type that doesn't lose data but takes up as little space as possible.\n\n### Matrices\n\nA **matrix** is the next step after a vector - it's a set of values arranged in a two-dimensional, rectangular format.\n\n#### Matrix (Lego) {.unnumbered}\n\n![lego depiction of a 3-row, 4-column matrix of 2x2 red-colored blocks](images/lego-2x2-matrix.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Minimal matrix in R: take a vector, \n# tell R how many rows you want\nmatrix(1:12, nrow = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n```\n:::\n\n```{.r .cell-code}\nmatrix(1:12, ncol = 3) # or columns\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    5    9\n[2,]    2    6   10\n[3,]    3    7   11\n[4,]    4    8   12\n```\n:::\n\n```{.r .cell-code}\n# by default, R will fill in column-by-column\n# the byrow parameter tells R to go row-by-row\nmatrix(1:12, nrow = 3, byrow = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    2    3    4\n[2,]    5    6    7    8\n[3,]    9   10   11   12\n```\n:::\n\n```{.r .cell-code}\n# We can also easily create square matrices \n# with a specific diagonal (this is useful for modeling)\ndiag(rep(1, times = 4))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    0    0    0\n[2,]    0    1    0    0\n[3,]    0    0    1    0\n[4,]    0    0    0    1\n```\n:::\n:::\n\n\nMost of the problems we're going to work on will not require much in the way of matrix or array operations. For now, you need the following:\n\n-   Know that matrices exist and what they are (2-dimensional arrays of numbers)\n-   Understand how they are indexed (because it is extremely similar to data frames that we'll work with in the next chapter)\n-   Be aware that there are lots of functions that depend on matrix operations at their core (including linear regression)\n\n#### Indexing in Matrices {#indexing-matrices}\n\n`R` uses \\[row, column\\] to index matrices. To extract the bottom-left element of a 3x4 matrix, we would use \\[3,1\\] to get to the third row and first column entry; in python, we would use \\[2,0\\] (remember that Python is 0-indexed).\n\nAs with vectors, you can replace elements in a matrix using assignment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_mat <- matrix(1:12, nrow = 3, byrow = T)\n\nmy_mat[3,1] <- 500\n\nmy_mat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    2    3    4\n[2,]    5    6    7    8\n[3,]  500   10   11   12\n```\n:::\n:::\n\n\n#### Matrix Operations\n\nThere are a number of matrix operations that we need to know for basic programming purposes:\n\n-   scalar multiplication $$c*\\textbf{X} = c * \\left[\\begin{array}{cc} x_{1,1} & x_{1, 2}\\\\x_{2,1} & x_{2,2}\\end{array}\\right] = \\left[\\begin{array}{cc} c*x_{1,1} & c*x_{1, 2}\\\\c*x_{2,1} & c*x_{2,2}\\end{array}\\right]$$\n-   transpose - flip the matrix across the left top -\\> right bottom diagonal. $$t(\\textbf{X}) = \\left[\\begin{array}{cc} x_{1,1} & x_{1, 2}\\\\x_{2,1} & x_{2,2}\\end{array}\\right]^T = \\left[\\begin{array}{cc} x_{1,1} & x_{2,1}\\\\x_{1,2} & x_{2,2}\\end{array}\\right]$$\n-   matrix multiplication (dot product) - you will learn more about this in linear algebra, but here's a preview. [Here is a better explanation of the cross product](https://www.mathsisfun.com/algebra/matrix-multiplying.html) $$\\textbf{X}*\\textbf{Y} = \\left[\\begin{array}{cc} x_{1,1} & x_{1, 2}\\\\x_{2,1} & x_{2,2}\\end{array}\\right] * \\left[\\begin{array}{cc} y_{1,1} \\\\y_{2,1} \\end{array}\\right] = \\left[\\begin{array}{c}x_{1,1}*y_{1,1} + x_{1,2}*y_{2,1} \\\\x_{2, 1}*y_{1,1} + x_{2,2}*y_{2,1}\\end{array}\\right]$$ Note that matrix multiplication depends on having matrices of compatible dimensions. If you have two matrices of dimension $(a \\times b)$ and $(c \\times d)$, then $b$ must be equal to $c$ for the multiplication to work, and your result will be $(a \\times d)$.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- matrix(c(1, 2, 3, 4), nrow = 2, byrow = T)\ny <- matrix(c(5, 6), nrow = 2)\n\n# Scalar multiplication\nx * 3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    3    6\n[2,]    9   12\n```\n:::\n\n```{.r .cell-code}\n3 * x\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    3    6\n[2,]    9   12\n```\n:::\n\n```{.r .cell-code}\n# Transpose\nt(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n```\n:::\n\n```{.r .cell-code}\nt(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    5    6\n```\n:::\n\n```{.r .cell-code}\n# matrix multiplication (dot product)\nx %*% y\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1]\n[1,]   17\n[2,]   39\n```\n:::\n:::\n\n\n### Arrays\n\nArrays are a generalized n-dimensional version of a vector: all elements have the same type, and they are indexed using square brackets in both R and python: `[dim1, dim2, dim3, ...]`\n\nI don't think you will need to create 3+ dimensional arrays in this class, but if you want to try it out, here is some code.\n\n\n::: {.cell}\n\n```{.r .cell-code}\narray(1:8, dim = c(2,2,2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n, , 1\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n, , 2\n\n     [,1] [,2]\n[1,]    5    7\n[2,]    6    8\n```\n:::\n:::\n\n\nNote that displaying this requires 2 slices, since it's hard to display 3D information in a 2D terminal arrangement.\n\n## Control Structures\n\nThe focus of this course is more on working with data - however in prior programming courses you have likely developed the logical thinking to work with Control structures. Control structures are statements in a program that determine when code is evaluated (and how many times it might be evaluated). There are two main types of control structures: if-statements and loops.\n\nBefore we start on the types of control structures, let's get in the right mindset. We're all used to \"if-then\" logic, and use it in everyday conversation, but computers require another level of specificity when you're trying to provide instructions.\n\n::: column-margin\nCheck out this video of the classic \"make a peanut butter sandwich instructions challenge\":\n\n::: youtube-video-container\n<iframe width=\"100%\" height=\"auto\" src=\"https://www.youtube.com/embed/Ct-lOOUqmyY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen>\n\n</iframe>\n:::\n\n<br>\n\nHere's another example:\n\n!['If you're done being pedantic, we should get dinner.' 'You did it again!' 'No, I didn't.'](https://imgs.xkcd.com/comics/conditionals.png)\n\nThe key takeaways from these bits of media are that you should read this section with a focus on exact precision - state *exactly* what you mean, and the computer will do what you say. If you instead expect the computer to get what you mean, you're going to have a bad time.\n:::\n\n### Conditional Statements\n\nConditional statements determine if code is evaluated.\n\nThey look like this:\n\n    if (condition)\n      then\n        (thing to do)\n      else\n        (other thing to do)\n\nThe else (other thing to do) part may be omitted.\n\nWhen this statement is read by the computer, the computer checks to see if condition is true or false. If the condition is true, then (thing to do) is also run. If the condition is false, then (other thing to do) is run instead.\n\n<details class=\"ex\">\n\n<summary>Let's try this out:</summary>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 3\ny <- 1\n\nif (x > 2) { \n  y <- 8\n} else {\n  y <- 4\n}\n\nprint(paste(\"x =\", x, \"; y =\", y))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x = 3 ; y = 8\"\n```\n:::\n:::\n\n\nThe logical condition after `if` must be in parentheses. It is common to then enclose the statement to be run if the condition is true in `{}` so that it is clear what code matches the if statement. You can technically put the condition on the line after the `if (x > 2)` line, and everything will still work, but then it gets hard to figure out what to do with the else statement - it technically would also go on the same line, and that gets hard to read.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 3\ny <- 1\n\nif (x > 2) y <- 8 else y <- 4\n\nprint(paste(\"x =\", x, \"; y =\", y))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"x = 3 ; y = 8\"\n```\n:::\n:::\n\n\nSo while the 2nd version of the code technically works, the first version with the brackets is much easier to read and understand. Please try to emulate the first version!\n\n</details>\n\n#### Representing Conditional Statements as Diagrams\n\nA common way to represent conditional logic is to draw a flow chart diagram.\n\nIn a flow chart, conditional statements are represented as diamonds, and other code is represented as a rectangle. Yes/no or True/False branches are labeled. Typically, after a conditional statement, the program flow returns to a single point.\n\n![Program flow diagram outline of a simple if/else statement](images/flow-chart1.png)\n\n<details class=\"ex\">\n\n<summary>US Tax brackets</summary>\n\n::: panel-tabset\n##### Problem {.unnumbered}\n\nThe US Tax code has brackets, such that the first \\$10,275 of your income is taxed at 10%, anything between \\$10,275 and \\$41,775 is taxed at 12%, and so on.\n\nHere is the table of tax brackets for single filers in 2022:\n\n| rate | Income                 |\n|------|------------------------|\n| 10%  | \\$0 to \\$10,275        |\n| 12%  | \\$10,275 to \\$41,775   |\n| 22%  | \\$41,775 to \\$89,075   |\n| 24%  | \\$89,075 to \\$170,050  |\n| 32%  | \\$170,050 to \\$215,950 |\n| 35%  | \\$215,950 to \\$539,900 |\n| 37%  | \\$539,900 or more      |\n\nNote: For the purposes of this problem, we're ignoring the personal exemption and the standard deduction, so we're already simplifying the tax code.\n\nWrite a set of if statements that assess someone's income and determine what their overall tax rate is.\n\nHint: You may want to keep track of how much of the income has already been taxed in a variable and what the total tax accumulation is in another variable.\n\n##### Solution {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Start with total income\nincome <- 200000\n\n# x will hold income that hasn't been taxed yet\nx <- income\n# y will hold taxes paid\ny <- 0\n\nif (x <= 10275) {\n  y <- x*.1 # tax paid\n  x <- 0 # All money has been taxed\n} else {\n  y <- y + 10275 * .1\n  x <- x - 10275 # Money remaining that hasn't been taxed\n}\n\nif (x <= (41775 - 10275)) {\n  y <- y + x * .12\n  x <- 0\n} else {\n  y <- y + (41775 - 10275) * .12\n  x <- x - (41775 - 10275) \n}\n\nif (x <= (89075 - 41775)) {\n  y <- y + x * .22\n  x <- 0\n} else {\n  y <- y + (89075 - 41775) * .22\n  x <- x - (89075 - 41775)\n}\n\nif (x <= (170050 - 89075)) {\n  y <- y + x * .24\n  x <- 0\n} else {\n  y <- y + (170050 - 89075) * .24\n  x <- x - (170050 - 89075)\n}\n\nif (x <= (215950 - 170050)) {\n  y <- y + x * .32\n  x <- 0\n} else {\n  y <- y + (215950 - 170050) * .32\n  x <- x - (215950 - 170050)\n}\n\nif (x <= (539900 - 215950)) {\n  y <- y + x * .35\n  x <- 0\n} else {\n  y <- y + (539900 - 215950) * .35\n  x <- x - (539900 - 215950)\n}\n\nif (x > 0) {\n  y <- y + x * .37\n}\n\n\nprint(paste(\"Total Tax Rate on $\", income, \" in income = \", round(y/income, 4)*100, \"%\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Total Tax Rate on $ 2e+05  in income =  22.12 %\"\n```\n:::\n:::\n\n\n##### Program Flow Chart\n\nLet's explore using program flow maps for a slightly more complicated problem: The tax bracket example that we used to demonstrate if statement syntax.\n\n\n::: {.cell}\n\n:::\n\n\n![The control flow diagram for the code in the previous example](images/tax-brackets.png)\n\nControl flow diagrams can be extremely helpful when figuring out how programs work (and where gaps in your logic are when you're debugging). It can be very helpful to map out your program flow as you're untangling a problem.\n:::\n\n</details>\n\n#### Chaining Conditional Statements: Else-If\n\nIn many cases, it can be helpful to have a long chain of conditional statements describing a sequence of alternative statements.\n\n<details class=\"ex\">\n\n<summary>Age brackets</summary>\n\nFor instance, suppose I want to determine what categorical age bracket someone falls into based on their numerical age. All of the bins are mutually exclusive - you can't be in the 25-40 bracket and the 41-55 bracket.\n\n::: panel-tabset\n##### Program Flow Map {.unnumbered}\n\n![Program flow map for a series of mutually exclusive categories. If our goal is to take a numeric age variable and create a categorical set of age brackets, such as \\<18, 18-25, 26-40, 41-55, 56-65, and \\>65, we can do this with a series of if-else statements chained together. Only one of the bracket assignments is evaluated, so it is important to place the most restrictive condition first.](images/age-category-prog-flow.png)\n\nThe important thing to realize when examining this program flow map is that if `age <= 18` is true, then **none of the other conditional statements even get evaluated**. That is, once a statement is true, none of the other statements matter. Because of this, it is important to place the most restrictive statement first.\n\n![Program flow map for a series of mutually exclusive categories, emphasizing that only some statements are evaluated. When age = 40, only (age \\<= 18), (age \\<= 25), and (age \\<= 40) are evaluated conditionally. Of the assignment statements, only bracket = '26-40' is evaluated when age = 40.](images/age-category-prog-flow2.png)\n\nIf for some reason you wrote your conditional statements in the wrong order, the wrong label would get assigned:\n\n![Program flow map for a series of mutually exclusive categories, with category labels in the wrong order - \\<40 is evaluated first, and so \\<= 25 and \\<= 18 will never be evaluated and the wrong label will be assigned for anything in those categories.](images/age-category-prog-flow3.png)\n\nIn code, we would write this statement using `else-if` (or `elif`) statements.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nage <- 40 # change this as you will to see how the code works\n\nif (age < 18) {\n  bracket <- \"<18\"\n} else if (age <= 25) {\n  bracket <- \"18-25\"\n} else if (age <= 40) {\n  bracket <- \"26-40\"\n} else if (age <= 55) {\n  bracket <- \"41-55\" \n} else if (age <= 65) {\n  bracket <- \"56-65\"\n} else {\n  bracket <- \">65\"\n}\n\nbracket\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"26-40\"\n```\n:::\n:::\n\n:::\n\n</details>\n\n### Loops {#prereading-loops}\n\n<!-- https://www.py4e.com/html3/05-iterations -->\n\nOften, we write programs which update a variable in a way that the new value of the variable depends on the old value:\n\n    x = x + 1\n\nThis means that we add one to the current value of `x`.\n\nBefore we write a statement like this, we have to **initialize** the value of `x` because otherwise, we don't know what value to add one to.\n\n    x = 0\n    x = x + 1\n\nWe sometimes use the word **increment** to talk about adding one to the value of `x`; **decrement** means subtracting one from the value of `x`.\n\nA particularly powerful tool for making these types of repetitive changes in programming is the **loop**, which executes statements a certain number of times. Loops can be written in several different ways, but all loops allow for executing a block of code a variable number of times.\n\n#### While Loops\n\nWe just discussed conditional statements, where a block of code is only executed *if* a logical statement is true.\n\nThe simplest type of loop is the **while** loop, which executes a block of code until a statement is no longer true.\n\n![Flow map showing while-loop pseudocode (while x \\<= N) { \\# code that changes x in some way} and the program flow map expansion where we check if x \\> N (exiting the loop if true); otherwise, we continue into the loop, execute the main body of #code and then change x and start over.](images/while-loop-flow.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 0\n\nwhile (x < 10) { \n  # Everything in here is executed \n  # during each iteration of the loop\n  print(x)\n  x <- x + 1\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] 6\n[1] 7\n[1] 8\n[1] 9\n```\n:::\n:::\n\n\n<details class=\"ex\">\n\n<summary>While loops</summary>\n\n::: panel-tabset\n##### Problem {.unnumbered}\n\nWrite a while loop that verifies that $$\\lim_{N \\rightarrow \\infty} \\prod_{k=1}^N \\left(1 + \\frac{1}{k^2}\\right) = \\frac{e^\\pi - e^{-\\pi}}{2\\pi}.$$\n\nTerminate your loop when you get within 0.0001 of $\\frac{e^\\pi - e^{-\\pi}}{2\\pi}$. At what value of $k$ is this point reached?\n\n##### Math Notation {.unnumbered}\n\nBreaking down math notation for code:\n\n-   If you are unfamiliar with the notation $\\prod_{k=1}^N f(k)$, this is the product of $f(k)$ for $k = 1, 2, ..., N$, $$f(1)\\cdot f(2)\\cdot ... \\cdot f(N)$$\n\n-   To evaluate a limit, we just keep increasing $N$ until we get arbitrarily close to the right hand side of the equation.\n\nIn this problem, we can just keep increasing $k$ and keep track of the cumulative product. So we define `k=1`, `prod = 1`, and `ans` before the loop starts. Then, we loop over `k`, multiplying `prod` by $(1 + 1/k^2)$ and then incrementing $k$ by one each time. At each iteration, we test whether `prod` is close enough to `ans` to stop the loop.\n\n##### Solution {.unnumbered}\n\nYou will use `pi` and `exp()` - these are available by default without any additional libraries or packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk <- 1\nprod <- 1\nans <- (exp(pi) - exp(-pi))/(2*pi)\ndelta <- 0.0001\n\nwhile (abs(prod - ans) >= 0.0001) {\n  prod <- prod * (1 + 1/k^2)\n  k <- k + 1\n}\n\nk\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 36761\n```\n:::\n\n```{.r .cell-code}\nprod\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.675978\n```\n:::\n\n```{.r .cell-code}\nans\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.676078\n```\n:::\n:::\n\n:::\n\n</details>\n\n#### For Loops\n\nAnother common type of loop is a **for** loop. In a for loop, we run the block of code, iterating through a series of values (commonly, one to N, but not always). Generally speaking, for loops are known as **definite** loops because the code inside a for loop is executed a specific number of times. While loops are known as **indefinite** loops because the code within a while loop is evaluated until the condition is falsified, which is not always a known number of times.\n\n::: panel-tabset\n##### Flow Map {.unnumbered}\n\n![Flow map showing for-loop pseudocode (for j in 1 to N) { \\# code} and the program flow map expansion where j starts at 1 and we check if j \\> N (exiting the loop if true); otherwise, we continue into the loop, execute the main body of #code and then increment j and start over.](images/for-loop-flow.png)\n\n##### R {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in 1:5 ) {\n  print(i)\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n```\n:::\n:::\n\n:::\n\nFor loops are often run from 1 to N but in essence, a for loop is run for every value of a vector (which is why loops are included in the same chapter as vectors).\n\n::: ex\nFor instance, in `R`, there is a built-in variable called `month.name`. Type `month.name` into your `R` console to see what it looks like. If we want to iterate along the values of month.name, we can:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfor (i in month.name)\n  print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"January\"\n[1] \"February\"\n[1] \"March\"\n[1] \"April\"\n[1] \"May\"\n[1] \"June\"\n[1] \"July\"\n[1] \"August\"\n[1] \"September\"\n[1] \"October\"\n[1] \"November\"\n[1] \"December\"\n```\n:::\n:::\n\n:::\n\n::: watch-out\n#### Avoiding Infinite Loops\n\nIt is very easy to create an **infinite** loop when you are working with while loops. Infinite loops never exit, because the condition is always true. If in the while loop example we decrement x instead of incrementing x, the loop will run forever.\n\nYou want to try very hard to avoid ever creating an infinite loop - it can cause your session to crash.\n\nOne common way to avoid infinite loops is to create a second variable that just counts how many times the loop has run. If that variable gets over a certain threshold, you exit the loop.\n\nThis while loop runs until either x \\< 10 or n \\> 50 - so it will run an indeterminate number of times and depends on the random values added to x. Since this process (a 'random walk') could theoretically continue forever, we add the n\\>50 check to the loop so that we don't tie up the computer for eternity.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 0\nn <- 0 # count the number of times the loop runs\n\nwhile (x < 10) { \n  print(x)\n  x <- x + rnorm(1) # add a random normal (0, 1) draw each time\n  n <- n + 1\n  if (n > 50) \n    break # this stops the loop if n > 50\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n[1] -0.8004167\n[1] -0.4488359\n[1] 0.07726011\n[1] 1.076022\n[1] 0.236495\n[1] 1.036383\n[1] 2.470015\n[1] 3.61352\n[1] 2.745402\n[1] 3.364632\n[1] 2.573653\n[1] 2.586098\n[1] 2.187477\n[1] 0.156968\n[1] 0.8766357\n[1] 2.393652\n[1] 1.138325\n[1] 1.182247\n[1] 1.884101\n[1] 1.259145\n[1] 0.8449511\n[1] 1.845423\n[1] 1.255805\n[1] 2.129725\n[1] 1.70498\n[1] 2.063443\n[1] 1.817791\n[1] 2.21366\n[1] 3.132276\n[1] 1.76784\n[1] 3.924772\n[1] 3.053541\n[1] 3.198459\n[1] 3.550694\n[1] 3.210531\n[1] 5.11821\n[1] 6.833642\n[1] 6.989876\n[1] 6.208318\n[1] 7.145861\n[1] 6.388224\n[1] 7.695821\n[1] 5.812687\n[1] 7.240108\n[1] 8.413374\n[1] 7.832022\n[1] 6.741505\n[1] 7.048287\n[1] 7.244076\n[1] 7.013024\n```\n:::\n:::\n\n\nIn the example above, there are more efficient ways to write a random walk, but we will get to that later. The important thing here is that we want to make sure that our loops don't run for all eternity.\n:::\n\n#### Controlling Loops\n\n<!-- https://www.py4e.com/html3/05-iterations -->\n\n<!-- https://www.datamentor.io/r-programming/break-next/ -->\n\nSometimes it is useful to control the statements in a loop with a bit more precision. You may want to skip over code and proceed directly to the next iteration, or, as demonstrated in the previous section with the `break` statement, it may be useful to exit the loop prematurely.\n\n::: panel-tabset\n##### Break Statement {.unnumbered}\n\n![A break statement is used to exit a loop prematurely](images/break-statement.png)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}